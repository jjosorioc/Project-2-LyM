/*
 *Authors:
 * 
 * Juan José Osorio 202021720 j.osorioc@uniandes.edu.co
 * 
 * Luis Alejandro Rubiano 202013482 la.rubiano@uniandes.edu.co
 */



using gold.**
  
      

procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
	coder:=createCoder()
   	//deCoder:=createDecoder()
    
    //GAutomataFrame.show(coder)
   //GAutomataFrame.show(deCoder)
   
  	
	
  	Utilities.test(coder)
		
end





function createCoder():ITransducer begin
	
	sigma := ('a'‥'z')∪{"null"}
	mod3 := {0,1,2}
	mod5 := {0,1,2,3,4}
	// Sigma, Alpha, anterior, indice modulo 3, replacements mod 5
	
	Q:= sigma × sigma × sigma ×mod3 ×mod5
	estados := Q ∪{"fin"}
	
	Σ :=('a'‥'z')∪{ ':', '$'} // Chars input
	Σ´:=Σ∪{'#'} // Chars output
	q₀:= ⟨"null", "null", "null", 1, 0⟩
	F:=	 {"fin"} //estados finales

	return 	GDeterministicTransducer(estados,Σ,Σ´,q₀,F,δ,g,h)
end


function δ(state, input) begin
	
	return "fin"
	end
	
	
function δ(⟨sigma, alpha, anterior, indice, replacements⟩,input) begin
	
	// Replacements
	nuevoReplacements := replacements
	if input ∈{sigma, alpha} then nuevoReplacements := (nuevoReplacements +1) % 5
	end
	
	
	if input='$' then return "fin"
		
	elseif input=':' then return ⟨sigma, alpha, anterior, indice, replacements⟩
		
		end
	
	
   // se selecciona sigma
   if sigma="null" then return ⟨input, "null", "null", 1, 0⟩
   	
   	// se selecciona alpha
   	elseif sigma∈('a'‥'z') and alpha="null" then return ⟨sigma, input, "null", 1, 0⟩
   	
   	end
   	
   	
   	if anterior="null" and indice = "null" then return ⟨sigma, alpha, input, (indice-'0' + 1)%3, nuevoReplacements⟩
   		
   	end
   	
   	if input='$' then return "fin" end
   
  
  return ⟨sigma, alpha, input, (indice-'0' + 1)%3, nuevoReplacements⟩
end



	
function h(state,input) begin
   
   return λ
end


function h(⟨sigma, alpha, anterior, indice, replacements⟩,input) begin

	if input='$' then return λ
   	
   	elseif input=':' then return ':'
   	end
	
	
	if input=sigma and alpha≠"null" then return alpha
	end
	if input=alpha and sigma≠"null" then return sigma
	end
	
	if input='$' then return replacements end //TODO
		
	if anterior = input then return '#' end

	//TODO: indice =1 return next Upper
	if input≠anterior and indice = 1 then return upperShift(input, 1) end 
		
	if input≠anterior and indice = 2 then return upperShift(input, 0) end 
	
	return input
end




function g(s) begin
	return λ
end


function upperShift(symbol, shift) begin
	
	return symbol
end

/*
 * ####################################################### DECODER #######################################################
 */