/*
 *Authors:
 * 
 * Juan José Osorio 202021720 j.osorioc@uniandes.edu.co
 * 
 * Luis Alejandro Rubiano 202013482 la.rubiano@uniandes.edu.co
 */



using gold.**
  
      

procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
	coder:=createCoder()
   	//deCoder:=createDecoder()
    
    //GAutomataFrame.show(coder)
   //GAutomataFrame.show(deCoder)
   
  	
	
  	Utilities.test(coder)
		
end





function createCoder():ITransducer begin
	
	sigma := ('a'‥'z')∪{"null"}
	mod3 := {0,1,2}
	mod5 := {0,1,2,3,4}
	// Sigma, Alpha, anterior, indice modulo 3, replacements mod 5
	
	Q:= sigma × sigma × sigma ×mod3 ×mod5
	estados := Q ∪{"fin"}
	
	Σ :=('a'‥'z')∪{ ':', '$'} // Chars input
	Σ´:=Σ∪{'#'}∪{'0', '1', '2', '3', '4'} ∪ ('A'‥'Z') // Chars output
	q₀:= ⟨"null", "null", "null", 1, 0⟩
	F:=	 {"fin"} //estados finales

	return 	GDeterministicTransducer(estados,Σ,Σ´,q₀,F,δ,g,h)
end


function δ(state, input) begin
	
	return "fin"
	end
	
	
function δ(⟨sigma, alpha, anterior, indice, replacements⟩,input) begin
	
	// Replacements
	nuevoReplacements := replacements
	if input ∈{sigma, alpha} then nuevoReplacements := (nuevoReplacements +1) % 5
	end
	
	
	if input='$' then return "fin"
		
	elseif input=':' then return ⟨sigma, alpha, anterior, indice, replacements⟩
		
		end
	
	
   // se selecciona sigma
   if sigma="null" then return ⟨input, "null", "null", 1, 0⟩
   	
   	// se selecciona alpha
   	elseif sigma∈('a'‥'z') and alpha="null" then return ⟨sigma, input, "null", 1, 0⟩
   	
   	end
   	
   	
   	if anterior="null" and indice = "null" then return ⟨sigma, alpha, input, (indice-'0' + 1)%3, nuevoReplacements⟩
   		
   	end
   	
   	if input='$' then return "fin" end
   
  
  return ⟨sigma, alpha, input, (indice-'0' + 1)%3, nuevoReplacements⟩
end



	
function h(state,input) begin
   
   return λ
end


function h(⟨sigma, alpha, anterior, indice, replacements⟩,input) begin

	if input='$' then // Print amount of replacements
		if replacements = 0 then return '0'
		elseif  replacements = 1 then return '1'
		elseif  replacements = 2 then return '2'
		elseif  replacements = 3 then return '3'
		elseif  replacements = 4 then return '4'
		end
   	
   	elseif input=':' then return ':' // Print :
   	end
	
	// When a replacement occurs
	if input=sigma and alpha≠"null" then return alpha
	end
	if input=alpha and sigma≠"null" then return sigma
	end
	

	if anterior = input then return '#' end // Repeated symbols

	
	//TODO: indice =1 return next Upper
	if input≠anterior and indice = 1 then return upperShift(input, 1) end 
		
	if input≠anterior and indice = 2 then return upperShift(input, 0) end 
	
	// Else return input
	return input
end




function g(s) begin
	return λ
end


function upperShift(symbol, shift) begin
	newSymbol = 0
	
	if shift = 0 and symbol≠'z' then newSymbol := symbol - 32
	elseif symbol≠'z' then 
		newSymbol := symbol + shift - 32
	elseif symbol='z' and shift = 0 then 
		newSymbol = 90
	else
		return 'A'
	end
		
	if newSymbol=65 then return 'A'
	elseif newSymbol=66 then return 'B'
	elseif newSymbol=67 then return 'C'
	elseif newSymbol=68 then return 'D'
	elseif newSymbol=69 then return 'E'
	elseif newSymbol=70 then return 'F'
	elseif newSymbol=71 then return 'G'
	elseif newSymbol=72 then return 'H'
	elseif newSymbol=73 then return 'I'
	elseif newSymbol=74 then return 'J'
	elseif newSymbol=75 then return 'K'
	elseif newSymbol=76 then return 'L'
	elseif newSymbol=77 then return 'M'
	elseif newSymbol=78 then return 'N'
	elseif newSymbol=79 then return 'O'
	elseif newSymbol=80 then return 'P'
	elseif newSymbol=81 then return 'Q'
	elseif newSymbol=82 then return 'R'
	elseif newSymbol=83 then return 'S'
	elseif newSymbol=84 then return 'T'
	elseif newSymbol=85 then return 'U'
	elseif newSymbol=86 then return 'V'
	elseif newSymbol=87 then return 'W'
	elseif newSymbol=88 then return 'X'
	elseif newSymbol=89 then return 'Y'
	elseif newSymbol=90 then return 'Z'
	end
end

/*
 * ####################################################### DECODER #######################################################
 */