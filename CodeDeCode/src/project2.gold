/*
 *Authors:
 * 
 * Juan José Osorio 202021720 j.osorioc@uniandes.edu.co
 * 
 * Luis Alejandro Rubiano 202013482 la.rubiano@uniandes.edu.co
 */



using gold.**
  
      

procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
	coder:=createCoder()
   	deCoder:=createDecoder()
    
    //GAutomataFrame.show(coder)
   //GAutomataFrame.show(deCoder)
   
  	
	//Utilities.test(deCoder)
  	Utilities.testCodeDecode(coder, deCoder)
		
end





function createCoder():ITransducer begin //Creates decoder
	
	sigma := ('a'‥'z')∪{"null"}
	mod3 := {0,1,2}
	mod5 := {0,1,2,3,4}
	// Sigma, Alpha, anterior, indice modulo 3, replacements mod 5
	
	Q:= sigma × sigma × sigma×mod3 ×mod5
	estados := Q ∪{"fin"}
	
	Σ :=('a'‥'z')∪{ ':', '$'} // Chars input
	Σ´:=Σ∪{'#'}∪{'0', '1', '2', '3', '4'} ∪ ('A'‥'Z') // Chars output
	q₀:= ⟨"null", "null", "null", 1, 0⟩
	F:=	 {"fin"} //estados finales

	return 	GDeterministicTransducer(estados,Σ,Σ´,q₀,F,δ,g,h)
end


function δ(state, input) begin
	
	return "fin"
	end
	
	
function δ(⟨sigma, alpha, anterior, indice, replacements⟩,input) begin
	
	// Replacements
	nuevoReplacements := replacements
	if input ∈{sigma, alpha} then nuevoReplacements := (nuevoReplacements +1) % 5
	end
	
	
	if input='$' then return "fin"
		
	elseif input=':' then return ⟨sigma, alpha, anterior, indice, replacements⟩
		
		end
	
	
   // se selecciona sigma
   if sigma="null" then return ⟨input, "null", "null", 1, 0⟩
   	
   	// se selecciona alpha
   	elseif sigma∈('a'‥'z') and alpha="null" then return ⟨sigma, input, "null", 1, 0⟩
   	
   	end
   	
   	
   	if anterior="null" and indice = "null" then return ⟨sigma, alpha, input, (indice-'0' + 1)%3, nuevoReplacements⟩
   		
   	end
   	
   	if input='$' then return "fin" end
   
  
  return ⟨sigma, alpha, input, (indice-'0' + 1)%3, nuevoReplacements⟩
end



	
function h(state,input) begin
   
   return λ
end


function h(⟨sigma, alpha, anterior, indice, replacements⟩,input) begin

	if input='$' then // Print amount of replacements
		if replacements = 0 then return '0'
		elseif  replacements = 1 then return '1'
		elseif  replacements = 2 then return '2'
		elseif  replacements = 3 then return '3'
		elseif  replacements = 4 then return '4'
		end
   	
   	elseif input=':' then return ':' // Print :
   	end
	
	// When a replacement occurs
	if input=sigma and alpha≠"null" then return alpha
	
	elseif input=alpha and sigma≠"null" then return sigma
	
	elseif input∉{sigma,alpha} and alpha≠"null" and sigma≠"null" then
		if anterior = input then return '#'  // Repeated symbols
		
		// index%3 = 1
		elseif input≠anterior and indice = 1 then return upperShift(input, 1)
		
		// index%3 = 2
		elseif input≠anterior and indice = 2 then return upperShift(input, 0) 
		end 
	end
	

	

	
	// Else return input
	return input
end




function g(s) begin
	return λ
end


function upperShift(symbol, shift) begin
	newSymbol = 0 //Cambio de letras a mayuscula, se mueve 1 o 0
	
	if shift = 0 and symbol≠'z' then newSymbol := symbol - 32
	elseif symbol≠'z' then 
		newSymbol := symbol + shift - 32
	elseif symbol='z' and shift = 0 then 
		newSymbol = 90
	else
		return 'A'
	end
		
	toCharResult: char[]:= Character.toChars(newSymbol)
	return toCharResult[0]
end

/*
 * ####################################################### DECODER #######################################################
 */
 
 
 function createDecoder():ITransducer begin
	sigma := ('a'‥'z')∪{"null"}
	mod3 := {0,1,2}
	mod5 := {0,1,2,3,4}
	// Sigma, Alpha, anterior, indice modulo 3, replacements mod 5
	
	Q:= sigma × sigma × sigma×mod3  
	estados := Q ∪{"fin"}
	
	Σ :=('a'‥'z')∪{':','#'}∪{'0', '1', '2', '3', '4'}∪('A'‥'Z') // Chars input
	Σ´:= ('a'‥'z')∪{':', '$'} // Chars output
	q₀:= ⟨"null", "null", "null", 1⟩
	F:=	 {"fin"} //estados finales

	return 	GDeterministicTransducer(estados,Σ,Σ´,q₀,F,δ1,g,h1)
end

function δ1(estado, input) begin
	return "fin"
end
 
 function δ1(⟨sigma, alpha, anterior, indice⟩,input) begin
 	
 	
 	// Si el input == : o si es un num => Estado final
 	if input = ':' then return ⟨sigma, alpha, anterior, indice⟩
 		
 	elseif input∈{'0', '1', '2', '3', '4'} then return "fin"
 		
 	end
 	
 	// If input = #
   	if input = '#' then return ⟨sigma, alpha, anterior, (indice + 1) % 3⟩ end
 	
 	
 	// Read Sigma and alpha
 	// se selecciona sigma
	if sigma="null" and alpha="null" and anterior="null" and input∈('a'‥'z') then return ⟨input, "null", "null", 1⟩ end
   	
   	// se selecciona alpha
   	if sigma∈('a'‥'z') and alpha="null" and anterior="null" and input∈('a'‥'z') then return ⟨sigma, input, "null", 1⟩ end	
   	
   	
   	// If input = sigma or alpha
   	if input ∈{sigma, alpha} then
   		
   		if input = sigma then return ⟨sigma, alpha, alpha, (indice + 1) % 3⟩
   			
   		elseif input = alpha then return ⟨sigma, alpha, sigma, (indice + 1) % 3⟩
   			
   		end
   		
   	end
   	
 	
 	
 	// If input is in uppercase
 	if input - 0 >= 65 and input - 0 <= 90 and sigma ≠"null" and alpha ≠"null" then
 		
 		if indice = 1 then return ⟨sigma, alpha, minusculaAnterior(input), (indice + 1) % 3⟩
 			
 		elseif indice = 2 then return ⟨sigma, alpha, minusculaMisma(input), (indice + 1) % 3⟩
 		

 		end
 	end
 	
 	if input - 0 >= 65 and input - 0 <= 90 then
 		return ⟨sigma, alpha, anterior, indice⟩
 		end
 		
 	
 	
 	return ⟨sigma, alpha, input, (indice + 1) % 3⟩
 end
 

function h1(estado, input) begin
	return λ
end


function h1(⟨sigma, alpha, anterior, indice⟩,input) begin
	
	if input∈('0'‥'4') then return '$' end
		
	if input='#' then return anterior 
	
	elseif input=':' then return input
	
	end
	
	
	
	if input = sigma and alpha≠"null" then return alpha
		
	elseif input = alpha and sigma≠"null" then return sigma
		
	end
	
	// If input is in uppercase
 	if input - 0 >= 65 and input - 0 <= 90 and sigma ≠"null" and alpha ≠"null" then
 		
 		if indice = 1 then return minusculaAnterior(input)
 			
 		elseif indice = 2 then return minusculaMisma(input)
 		
 		else return λ

 		end
 	
 	elseif input - 0 >= 65 and input - 0 <= 90 then return λ
 	end
 	
 	
 	// Sigma y alpha
 	if sigma="null" and alpha="null" then return input
		
	elseif sigma≠"null" and alpha="null" then return input
		
	end
	
	
	return input
end

 
 
 // Funciones para los inputs en mayúscula
 
 function minusculaMisma(input) begin //Pasa una letra a minuscula A --> a
 	newSymbol = input-0
 	newSymbol = newSymbol + 32
 	toCharResult: char[]:= Character.toChars(newSymbol)
	return toCharResult[0]
 end
 	
 
 function minusculaAnterior(input) begin
 	if input = 'A' then
 		return 'z'
 	else
	  	newSymbol = input-0
	 	newSymbol = newSymbol + 31
	 	toCharResult: char[]:= Character.toChars(newSymbol) //Pasa una letra a minuscula 
		return toCharResult[0]									// y toma la anterior A --> z
 	end
 end
 